// Navbar.tsx
"use client";
import React, { useState, useEffect } from "react";
import { Dialog, DialogPanel } from "@headlessui/react";
import {
  Menu,
  X,
  ChevronRight,
  ChevronDown,
  LineChart,
  BarChart,
  GlobeIcon,
  GraduationCapIcon,
  Book,
  Code,
  Video,
  Calculator,
  TrendingUp,
  Scale,
} from "lucide-react";
import Image from "next/image";
import { SignedIn, SignedOut, SignInButton, UserButton } from "@clerk/nextjs";
import { Button } from "./ui/button";
import Link from "next/link";

const marketItems = [
  { name: "Crypto", href: "/markets/crypto" },
  { name: "Stock", href: "/markets/stocks" },
];

const learnItems = [
  {
    name: "Tutorials",
    items: [
      { name: "Beginner Guide", href: "/learn/beginner-guides", icon: Book },
      { name: "Advanced Trading", href: "/learn/advanced-trading", icon: Code },
    ],
  },
  {
    name: "Tools",
    items: [
      {
        name: "Position Calculator",
        href: "/tools/position-sizing-calculator",
        icon: Calculator,
      },
      {
        name: "PNL Calculator",
        href: "/tools/profit-loss-calculator",
        icon: TrendingUp,
      },
      {
        name: "Risk Calculator",
        href: "/risk-reward-calculator",
        icon: Scale,
      },
    ],
  },
  {
    name: "Glossary",
    href: "/learn/glossary",
  },
  {
    name: "Quizzes",
    href: "/learn/quizzes",
  },
  {
    name: "Videos",
    href: "/learn/videos",
    icon: Video,
  },
];

const navigation = [
  { name: "Predictions", href: "/predict", icon: LineChart },
  { name: "Markets", items: marketItems, icon: BarChart },
  { name: "News", href: "/news", icon: GlobeIcon },
  { name: "Learn", items: learnItems, icon: GraduationCapIcon },
];

export default function Navbar() {
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [scrolled, setScrolled] = useState(false);
  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);
  const [activeSubmenu, setActiveSubmenu] = useState<string | null>(null);

  useEffect(() => {
    const handleScroll = () => setScrolled(window.scrollY > 20);
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const handleMouseEnter = (name: string) => setActiveDropdown(name);
  const handleMouseLeave = () => setActiveDropdown(null);

  const handleSubmenuToggle = (name: string) => {
    setActiveSubmenu(activeSubmenu === name ? null : name);
  };

  return (
    <header
      className={`fixed inset-x-0 top-0 z-50 transition-all duration-300 ${
        scrolled ? "bg-slate-900/95 backdrop-blur-sm shadow-lg" : "bg-slate-900"
      }`}
    >
      <nav className="flex items-center justify-between p-6 lg:px-8 max-w-7xl mx-auto">
        <div className="flex lg:flex-1">
          <a href="/" className="flex items-center gap-2 group">
            <Image src="/logo.svg" height={30} width={30} alt="Logo" />
            <span className="text-lg font-bold text-white">Quantum</span>
          </a>
        </div>

        <div className="flex lg:hidden">
          <button
            onClick={() => setMobileMenuOpen(true)}
            className="p-2 text-gray-400 hover:text-white transition-colors"
          >
            <Menu className="w-6 h-6" />
          </button>
        </div>

        <div className="hidden lg:flex lg:gap-x-8">
          {navigation.map((item) => (
            <div
              key={item.name}
              className="relative"
              onMouseEnter={() => handleMouseEnter(item.name)}
              onMouseLeave={handleMouseLeave}
            >
              <a
                href={item.href}
                className="flex items-center gap-1 text-sm font-medium text-gray-300 hover:text-white transition-colors"
              >
                {item.icon && <item.icon className="w-5 h-5 mr-2" />}
                {item.name}
                {item.items && (
                  <ChevronDown
                    className={`w-4 h-4 transition-transform duration-200 ${
                      activeDropdown === item.name ? "rotate-180" : ""
                    }`}
                  />
                )}
              </a>
              {item.items && activeDropdown === item.name && (
                <div className="absolute left-0 mt-2 w-56 rounded-xl bg-slate-800 shadow-lg ring-1 ring-black ring-opacity-5">
                  {item.items.map((submenu) => (
                    <div key={submenu.name} className="p-2">
                      {"items" in submenu ? (
                        <div className="relative">
                          <button
                            onClick={() => handleSubmenuToggle(submenu.name)}
                            className="flex items-center justify-between w-full px-3 py-2 text-sm font-medium text-gray-300 hover:bg-slate-700 hover:text-white rounded-lg"
                          >
                            {submenu.name}
                            <ChevronRight
                              className={`w-4 h-4 transition-transform ${
                                activeSubmenu === submenu.name
                                  ? "rotate-90"
                                  : ""
                              }`}
                            />
                          </button>
                          {activeSubmenu === submenu.name && (
                            <div className="absolute left-full top-0 mt-2 ml-2 w-48 rounded-xl bg-slate-800 shadow-lg ring-1 ring-black ring-opacity-5">
                              {submenu.items.map((subItem) => (
                                <a
                                  key={subItem.name}
                                  href={subItem.href}
                                  className="flex items-center gap-2 px-3 py-2 text-sm text-gray-300 hover:bg-slate-700 hover:text-white rounded-lg"
                                >
                                  {subItem.icon && (
                                    <subItem.icon className="w-4 h-4" />
                                  )}
                                  {subItem.name}
                                </a>
                              ))}
                            </div>
                          )}
                        </div>
                      ) : (
                        <a
                          href={submenu.href}
                          className="block px-3 py-2 text-sm text-gray-300 hover:bg-slate-700 hover:text-white rounded-lg"
                        >
                          {submenu.name}
                        </a>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>

        <div className="hidden lg:flex lg:flex-1 lg:justify-end">
          <SignedIn>
            <UserButton />
          </SignedIn>
          <SignedOut>
            <SignInButton mode="modal">
              <button className="text-sm font-medium text-gray-300 hover:text-white transition-colors">
                Sign in
              </button>
            </SignInButton>
          </SignedOut>
        </div>
      </nav>
    </header>
  );
}
